type CustomNodeProps = {
  nodeDatum: CustomNodeData; // Explicitly type nodeDatum
  onNodeClick?: (node: CustomNodeData) => void; // Optional onNodeClick handler
};

const CustomNode: React.FC<CustomNodeProps> = ({ nodeDatum, onNodeClick }) => {
  const [showInfo, setShowInfo] = useState(false);

  return (
    <>
      <g>
        {/* Node Rectangle */}
        <rect
          x="-100"
          y="-25"
          width="200"
          height="50"
          rx="5"
          fill="white"
          stroke="#93C5FD"
          strokeWidth="2"
          className="shadow-md"
        />
        {/* Node Name */}
        <text
          fill="currentColor"
          x="0"
          y="-5"
          textAnchor="middle"
          className="text-sm font-medium"
        >
          {nodeDatum.name}
        </text>
        {/* Node Title */}
        {nodeDatum.info?.title && (
          <text
            fill="#666"
            x="0"
            y="15"
            textAnchor="middle"
            className="text-xs"
          >
            {nodeDatum.info.title}
          </text>
        )}
        {/* Info Circle */}
        <circle
          cx="85"
          cy="-15"
          r="10"
          fill="#3B82F6"
          className="cursor-pointer hover:fill-blue-400"
          onClick={() => setShowInfo(true)}
        />
        <text
          x="85"
          y="-11"
          textAnchor="middle"
          fill="white"
          className="text-xs cursor-pointer"
          onClick={() => setShowInfo(true)}
        >
          i
        </text>
      </g>
      {/* Info Card */}
      {showInfo && nodeDatum.info && (
        <InfoCard
          info={nodeDatum.info}
          onClose={() => setShowInfo(false)}
        />
      )}
    </>
  );
};